//! Ethereum ABI encoding decoding library.

#![warn(missing_docs)]

pub mod param_type;
pub mod token;
mod constructor;
mod contract;
mod decoder;
mod encoder;
mod errors;
mod event;
mod event_param;
mod filter;
mod function;
mod log;
mod operation;
mod param;
mod signature;
mod util;

#[cfg(test)]
mod tests;

pub use crate::{
	constructor::Constructor,
	contract::{Contract, Functions, Events},
	decoder::decode,
	encoder::encode,
	errors::{Error, Result},
	event::Event,
	event_param::EventParam,
	filter::{Topic, TopicFilter, RawTopicFilter},
	function::Function,
	log::{Log, RawLog, LogParam, ParseLog, LogFilter},
	param::Param,
	param_type::ParamType,
	token::Token,
};

/// ABI word.
pub type Word = [u8; 32];

/// ABI address.
pub type Address = ethereum_types::Address;

/// ABI fixed bytes.
pub type FixedBytes = Vec<u8>;

/// ABI bytes.
pub type Bytes = Vec<u8>;

/// ABI signed integer.
pub type Int = ethereum_types::U256;

/// ABI unsigned integer.
pub type Uint = ethereum_types::U256;

/// Commonly used FixedBytes of size 32
pub type Hash = ethereum_types::H256;

/// Contract functions generated by ethabi-derive
pub trait FunctionOutputDecoder {
	/// Output types of the contract function
	type Output;

	/// Decodes the given bytes output for the contract function
	fn decode(&self, _: &[u8]) -> Result<Self::Output>;
}
